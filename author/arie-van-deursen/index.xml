<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Arie van Deursen | Annibale Panichella</title>
    <link>/author/arie-van-deursen/</link>
      <atom:link href="/author/arie-van-deursen/index.xml" rel="self" type="application/rss+xml" />
    <description>Arie van Deursen</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Tue, 13 Sep 2022 09:29:14 +0200</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Arie van Deursen</title>
      <link>/author/arie-van-deursen/</link>
    </image>
    
    <item>
      <title>Generating Class-Level Integration Tests Using Call Site Information</title>
      <link>/publication/ieee-tse2022/</link>
      <pubDate>Tue, 13 Sep 2022 09:29:14 +0200</pubDate>
      <guid>/publication/ieee-tse2022/</guid>
      <description>&lt;p&gt;Abstract: Search-based approaches have been used in the literature to automate the process of creating unit test cases. However, related work has shown that generated tests with high code coverage could be ineffective, i.e., they may not detect all faults or kill all injected mutants. In this paper, we propose CLING, an integration-level test case generation approach that exploits how a pair of classes, the caller and the callee, interact with each other through method calls. In particular, CLING generates integration-level test cases that maximize the Coupled Branches Criterion (CBC). Coupled branches are pairs of branches containing a branch of the caller and a branch of the callee such that an integration test that exercises the former also exercises the latter. CBC is a novel integration-level coverage criterion, measuring the degree to which a test suite exercises the interactions between a caller and its callee classes. We implemented CLING and evaluated the approach on 140 pairs of classes from five different open-source Java projects. Our results show that (1) CLING generates test suites with high CBC coverage, thanks to the definition of the test suite generation as a many-objectives problem where each couple of branches is an independent objective; (2) such generated suites trigger different class interactions and can kill on average 7.7% (with a maximum of 50%) of mutants that are not detected by tests generated randomly or at the unit level; (3) CLING can detect integration faults coming from wrong assumptions about the usage of the callee class (25 for our subject systems) that remain undetected when using automatically generated random and unit-level test suites.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Guiding Automated Test Case Generation for Transaction-Reverting Statements in Smart Contracts</title>
      <link>/publication/icsme2022/</link>
      <pubDate>Sat, 11 Jun 2022 18:43:48 +0200</pubDate>
      <guid>/publication/icsme2022/</guid>
      <description></description>
    </item>
    
    <item>
      <title>SynTest-Solidity: Automated Test Case Generation and Fuzzing for Smart Contracts</title>
      <link>/publication/icse-demo2022/</link>
      <pubDate>Tue, 18 Jan 2022 14:29:50 +0200</pubDate>
      <guid>/publication/icse-demo2022/</guid>
      <description></description>
    </item>
    
    <item>
      <title>PropR: Property-Based Automatic Program Repair</title>
      <link>/publication/icse2022/</link>
      <pubDate>Sat, 01 Jan 2022 09:32:39 +0100</pubDate>
      <guid>/publication/icse2022/</guid>
      <description></description>
    </item>
    
    <item>
      <title>	Assessing Robustness of ML-Based Program Analysis Tools using Metamorphic Program Transformations</title>
      <link>/publication/ase2021-nier/</link>
      <pubDate>Sat, 07 Aug 2021 22:27:51 +0200</pubDate>
      <guid>/publication/ase2021-nier/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Good Things Come In Threes: Improving Search-based Crash Reproduction With Helper Objectives</title>
      <link>/publication/ase2020a/</link>
      <pubDate>Thu, 30 Jul 2020 22:27:46 +0200</pubDate>
      <guid>/publication/ase2020a/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Generating Highly-structured Input Data by Combining Search-based Testing and Grammar-based Fuzzing</title>
      <link>/publication/ase2020-nier/</link>
      <pubDate>Mon, 06 Jul 2020 14:29:50 +0200</pubDate>
      <guid>/publication/ase2020-nier/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Botsing, a Search-based Crash Reproduction Framework for Java</title>
      <link>/publication/ase2020-tool/</link>
      <pubDate>Sun, 05 Jul 2020 14:19:53 +0200</pubDate>
      <guid>/publication/ase2020-tool/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Crash Reproduction Using Helper Objectives</title>
      <link>/publication/gecco2020/</link>
      <pubDate>Sat, 04 Jul 2020 18:56:54 +0200</pubDate>
      <guid>/publication/gecco2020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Effective and Efficient API Misuse Detection via Exception Propagation and Search-based Testing</title>
      <link>/publication/issta2019/</link>
      <pubDate>Wed, 01 May 2019 20:22:51 +0200</pubDate>
      <guid>/publication/issta2019/</guid>
      <description>&lt;p&gt;&lt;b&gt; Abstract &lt;/b&gt;: Application Programming Interfaces (APIs)
typically come with (implicit) usage constraints.
The violations of these constraints (API misuses)
can lead to software crashes.
Even though there are several tools that
can detect API misuses,
most of them suffer from a very high rate of false positives.
We introduce Catcher, a novel API misuse detection approach
that combines static exception propagation analysis with automatic search-based test case
generation to effectively and efficiently pinpoint crash-prone API misuses
in client applications.
We validate Catcher against 21 Java applications,
targeting misuses of the Java platform&amp;rsquo;s API.
Our results indicate that Catcher is able to generate
test cases that uncover 243 (unique) API misuses that result in
crashes.
Our empirical evaluation shows that Catcher can detect a large number of misuses (77 cases)
that would remain undetected by the traditional coverage-based test case generator EvoSuite.
Additionally, Catcher is on average eight times faster than EvoSuite
in generating test cases for the identified misuses.
Finally, we find that the majority of the exceptions triggered by Catcher
are unexpected to developers i.e., not only unhandled in the source code but also not listed in the documentation of the client applications.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Search-Based Crash Reproduction and Its Impact on Debugging</title>
      <link>/publication/ieee-tse2018e/</link>
      <pubDate>Mon, 13 Aug 2018 18:55:36 +0200</pubDate>
      <guid>/publication/ieee-tse2018e/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Single-objective versus Multi-Objectivized Optimization for Evolutionary Crash Reproduction</title>
      <link>/publication/ssbse2018a/</link>
      <pubDate>Fri, 20 Jul 2018 00:06:34 +0200</pubDate>
      <guid>/publication/ssbse2018a/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search-Based Test Data Generation for SQL Queries</title>
      <link>/publication/icse2018/</link>
      <pubDate>Fri, 20 Jul 2018 00:04:04 +0200</pubDate>
      <guid>/publication/icse2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Guided Genetic Algorithm for Automated Crash Reproduction</title>
      <link>/publication/icse2017/</link>
      <pubDate>Sun, 13 Aug 2017 19:34:17 +0200</pubDate>
      <guid>/publication/icse2017/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Evolutionary Testing for Crash Reproduction</title>
      <link>/publication/sbst2016a/</link>
      <pubDate>Thu, 18 Aug 2016 07:56:19 +0200</pubDate>
      <guid>/publication/sbst2016a/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mitchell Olsthoorn | Annibale Panichella</title>
    <link>/author/mitchell-olsthoorn/</link>
      <atom:link href="/author/mitchell-olsthoorn/index.xml" rel="self" type="application/rss+xml" />
    <description>Mitchell Olsthoorn</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Tue, 18 Jan 2022 14:29:50 +0200</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Mitchell Olsthoorn</title>
      <link>/author/mitchell-olsthoorn/</link>
    </image>
    
    <item>
      <title>SynTest-Solidity: Automated Test Case Generation and Fuzzing for Smart Contracts</title>
      <link>/publication/icse-demo2022/</link>
      <pubDate>Tue, 18 Jan 2022 14:29:50 +0200</pubDate>
      <guid>/publication/icse-demo2022/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Improving Test Case Generation for REST APIs Through Hierarchical Clustering</title>
      <link>/publication/ase2021/</link>
      <pubDate>Wed, 07 Jul 2021 22:27:51 +0200</pubDate>
      <guid>/publication/ase2021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Hybrid Multi-level Crossover for Unit Test Case Generation</title>
      <link>/publication/ssbse2021b/</link>
      <pubDate>Tue, 29 Jun 2021 09:16:23 +0200</pubDate>
      <guid>/publication/ssbse2021b/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;p&gt;State-of-the-art search-based approaches for test case generation work at test case level, where tests are represented as sequences of statements. These approaches make use of genetic operators (i.e., mutation and crossover) that create test variants by adding, altering, and removing statements from existing tests. While this encoding schema has been shown to be very effective for many-objective test case generation, the standard crossover operator (single-point) only alters the structure of the test cases but not the input data. In this paper, we argue that changing both the test case structure and the input data is necessary to increase the genetic variation and improve the search process. Hence, we propose a hybrid multi-level crossover (HMX) operator that combines the traditional test-level crossover with data-level recombination. The former evolves and alters the test case structures, while the latter evolves the input data using numeric and string-based recombinational operators. We evaluate our new crossover operator by performing an empirical study on more than 100 classes selected from open-source Java libraries for numerical operations and string manipulation. We compare HMX with the single-point crossover that is used in EvoSuite w.r.t structural coverage and fault detection capability. Our results show that HMX achieves a statistically significant increase in 30% of the classes up to 19% in structural coverage compared to the single-point crossover. Moreover, the fault detection capability improved up to 12% measured using strong mutation score.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Multi-objective Test Case Selection Through Linkage Learning-driven Crossover</title>
      <link>/publication/ssbse2021a/</link>
      <pubDate>Tue, 29 Jun 2021 09:16:23 +0200</pubDate>
      <guid>/publication/ssbse2021a/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;p&gt;Test case selection (TCS) aims to select a subset of the test suite to run for regression testing. The selection is typically based on past coverage and execution cost data. Researchers have successfully used multi-objective evolutionary algorithms (MOEAs), such as NSGA-II and its variants, to solve the problem. These MOEAs use traditional crossovers to create new candidate solutions during the search. Recent studies in evolutionary computation showed that more effective recombinations can be made by using linkage learning. Inspired by these recent advances in this field, we propose a new variant of NSGA-II, called L2-NSGA, that uses linkage learning to optimize test case selection. In particular, we use an unsupervised clustering algorithm to infer promising patterns among the solutions (sub-test suites). Then, these patterns are used in the next iterations of L2-NSGA to create solutions that contain/preserve these inferred patterns. Our results show that our customizations make NSGA-II more effective for test case selection. Furthermore, the test suite sub-sets generated by L2-NSGA are less expensive and more effective (detect more faults) than those generated by MOEAs used in the literature for regression testing.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Generating Highly-structured Input Data by Combining Search-based Testing and Grammar-based Fuzzing</title>
      <link>/publication/ase2020-nier/</link>
      <pubDate>Mon, 06 Jul 2020 14:29:50 +0200</pubDate>
      <guid>/publication/ase2020-nier/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>

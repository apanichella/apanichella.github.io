<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pouria Derakhshanfar | Annibale Panichella</title>
    <link>/author/pouria-derakhshanfar/</link>
      <atom:link href="/author/pouria-derakhshanfar/index.xml" rel="self" type="application/rss+xml" />
    <description>Pouria Derakhshanfar</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Tue, 13 Sep 2022 09:29:14 +0200</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Pouria Derakhshanfar</title>
      <link>/author/pouria-derakhshanfar/</link>
    </image>
    
    <item>
      <title>Generating Class-Level Integration Tests Using Call Site Information</title>
      <link>/publication/ieee-tse2022/</link>
      <pubDate>Tue, 13 Sep 2022 09:29:14 +0200</pubDate>
      <guid>/publication/ieee-tse2022/</guid>
      <description>&lt;p&gt;Abstract: Search-based approaches have been used in the literature to automate the process of creating unit test cases. However, related work has shown that generated tests with high code coverage could be ineffective, i.e., they may not detect all faults or kill all injected mutants. In this paper, we propose CLING, an integration-level test case generation approach that exploits how a pair of classes, the caller and the callee, interact with each other through method calls. In particular, CLING generates integration-level test cases that maximize the Coupled Branches Criterion (CBC). Coupled branches are pairs of branches containing a branch of the caller and a branch of the callee such that an integration test that exercises the former also exercises the latter. CBC is a novel integration-level coverage criterion, measuring the degree to which a test suite exercises the interactions between a caller and its callee classes. We implemented CLING and evaluated the approach on 140 pairs of classes from five different open-source Java projects. Our results show that (1) CLING generates test suites with high CBC coverage, thanks to the definition of the test suite generation as a many-objectives problem where each couple of branches is an independent objective; (2) such generated suites trigger different class interactions and can kill on average 7.7% (with a maximum of 50%) of mutants that are not detected by tests generated randomly or at the unit level; (3) CLING can detect integration faults coming from wrong assumptions about the usage of the callee class (25 for our subject systems) that remain undetected when using automatically generated random and unit-level test suites.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Single and Multi-objective Test Cases Prioritization for Self-driving Cars in Virtual Environments</title>
      <link>/publication/acm-tosem2022/</link>
      <pubDate>Mon, 04 Apr 2022 11:21:45 +0200</pubDate>
      <guid>/publication/acm-tosem2022/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Hybrid Multi-level Crossover for Unit Test Case Generation</title>
      <link>/publication/ssbse2021b/</link>
      <pubDate>Tue, 29 Jun 2021 09:16:23 +0200</pubDate>
      <guid>/publication/ssbse2021b/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;p&gt;State-of-the-art search-based approaches for test case generation work at test case level, where tests are represented as sequences of statements. These approaches make use of genetic operators (i.e., mutation and crossover) that create test variants by adding, altering, and removing statements from existing tests. While this encoding schema has been shown to be very effective for many-objective test case generation, the standard crossover operator (single-point) only alters the structure of the test cases but not the input data. In this paper, we argue that changing both the test case structure and the input data is necessary to increase the genetic variation and improve the search process. Hence, we propose a hybrid multi-level crossover (HMX) operator that combines the traditional test-level crossover with data-level recombination. The former evolves and alters the test case structures, while the latter evolves the input data using numeric and string-based recombinational operators. We evaluate our new crossover operator by performing an empirical study on more than 100 classes selected from open-source Java libraries for numerical operations and string manipulation. We compare HMX with the single-point crossover that is used in EvoSuite w.r.t structural coverage and fault detection capability. Our results show that HMX achieves a statistically significant increase in 30% of the classes up to 19% in structural coverage compared to the single-point crossover. Moreover, the fault detection capability improved up to 12% measured using strong mutation score.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Good Things Come In Threes: Improving Search-based Crash Reproduction With Helper Objectives</title>
      <link>/publication/ase2020a/</link>
      <pubDate>Thu, 30 Jul 2020 22:27:46 +0200</pubDate>
      <guid>/publication/ase2020a/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Botsing, a Search-based Crash Reproduction Framework for Java</title>
      <link>/publication/ase2020-tool/</link>
      <pubDate>Sun, 05 Jul 2020 14:19:53 +0200</pubDate>
      <guid>/publication/ase2020-tool/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Crash Reproduction Using Helper Objectives</title>
      <link>/publication/gecco2020/</link>
      <pubDate>Sat, 04 Jul 2020 18:56:54 +0200</pubDate>
      <guid>/publication/gecco2020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Single-objective versus Multi-Objectivized Optimization for Evolutionary Crash Reproduction</title>
      <link>/publication/ssbse2018a/</link>
      <pubDate>Fri, 20 Jul 2018 00:06:34 +0200</pubDate>
      <guid>/publication/ssbse2018a/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sebastiano Panichella | Annibale Panichella</title>
    <link>/author/sebastiano-panichella/</link>
      <atom:link href="/author/sebastiano-panichella/index.xml" rel="self" type="application/rss+xml" />
    <description>Sebastiano Panichella</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Tue, 04 Aug 2020 16:05:57 +0200</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Sebastiano Panichella</title>
      <link>/author/sebastiano-panichella/</link>
    </image>
    
    <item>
      <title>Revisiting Test Smells in Automatically Generated Tests: Limitations, Pitfalls, and Opportunities</title>
      <link>/publication/icsme2020/</link>
      <pubDate>Tue, 04 Aug 2020 16:05:57 +0200</pubDate>
      <guid>/publication/icsme2020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>DeepTC-Enhancer: Improving the Readability of Automatically Generated Tests</title>
      <link>/publication/ase2020b/</link>
      <pubDate>Thu, 30 Jul 2020 22:27:51 +0200</pubDate>
      <guid>/publication/ase2020b/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Testing with Fewer Resources: An Adaptive Approach to Performance-Aware Test Case Generation</title>
      <link>/publication/ieee-tse2019/</link>
      <pubDate>Wed, 09 Oct 2019 09:51:33 +0200</pubDate>
      <guid>/publication/ieee-tse2019/</guid>
      <description>&lt;p&gt;Abstract: Automated test case generation is an effective technique to yield high-coverage test suites.
While the majority of research effort has been devoted to satisfying coverage criteria, a recent trend emerged towards optimizing other non-coverage aspects.
In this regard, runtime and memory usage are two essential dimensions: less expensive tests reduce the resource demands for the generation process and later regression testing phases.
This study shows that performance-aware test case generation requires solving two main challenges:
providing a good approximation of resource usage with minimal overhead and&lt;br&gt;
avoiding detrimental effects on both final coverage and fault detection effectiveness.
To tackle these challenges, we conceived a set of performance proxies -inspired by previous work on performance testing- that provide a reasonable estimation of the test execution costs (i.e., runtime and memory usage).
Thus, we propose an adaptive strategy, called aDynaMOSA, which leverages these proxies by extending DynaMOSA, a state-of-the-art evolutionary algorithm in unit testing.
Our empirical study -involving 110 non-trivial Java classes- reveals
that our adaptive approach generates test suite with statistically significant improvements in runtime (-25%) and heap memory consumption (-15%) compared to DynaMOSA. Additionally, aDynaMOSA has comparable results to DynaMOSA over seven different coverage criteria and similar fault detection effectiveness.
Our empirical investigation also highlights that the usage of performance proxies (i.e., without the adaptiveness) is not sufficient to generate more performant test cases without compromising the overall coverage.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Search-based Training Algorithm for Cost-aware Prediction</title>
      <link>/publication/gecco2016/</link>
      <pubDate>Thu, 18 Aug 2016 07:47:34 +0200</pubDate>
      <guid>/publication/gecco2016/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The impact of test case summaries on bug fixing performance: An empirical investigation</title>
      <link>/publication/icse2016/</link>
      <pubDate>Thu, 18 Aug 2016 07:43:26 +0200</pubDate>
      <guid>/publication/icse2016/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Labeling Source Code with Information Retrieval Methods: An Empirical Study.</title>
      <link>/publication/emse2014/</link>
      <pubDate>Sat, 19 Jul 2014 23:52:54 +0200</pubDate>
      <guid>/publication/emse2014/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Improving IR-based traceability recovery via noun-based indexing of software artifacts</title>
      <link>/publication/jse2012/</link>
      <pubDate>Thu, 19 Jul 2012 23:55:49 +0200</pubDate>
      <guid>/publication/jse2012/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Applying a Smoothing Filter to Improve IR-based Traceability Recovery Processes: An Empirical Investigation.</title>
      <link>/publication/infsoft/</link>
      <pubDate>Thu, 19 Jul 2012 23:54:19 +0200</pubDate>
      <guid>/publication/infsoft/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>

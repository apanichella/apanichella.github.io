<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Annibale Panichella</title>
    <link>/</link>
      <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <description>Annibale Panichella</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Mon, 19 Apr 2021 09:03:56 +0200</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Annibale Panichella</title>
      <link>/</link>
    </image>
    
    <item>
      <title>Automated Repair of Feature Interaction Failures in Automated Driving Systems</title>
      <link>/publication/issta2021/</link>
      <pubDate>Mon, 19 Apr 2021 09:03:56 +0200</pubDate>
      <guid>/publication/issta2021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>EvoSuite at the SBST 2021 Tool Competition</title>
      <link>/publication/sbst2021/</link>
      <pubDate>Thu, 01 Apr 2021 17:56:40 +0200</pubDate>
      <guid>/publication/sbst2021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>What Are We Really Testing in Mutation Testing for Machine Learning? A Critical Reflection</title>
      <link>/publication/icse-nier2020/</link>
      <pubDate>Mon, 18 Jan 2021 14:29:50 +0200</pubDate>
      <guid>/publication/icse-nier2020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search-Based Software Re-Modularization: A Case Study at Adyen</title>
      <link>/publication/icse-seip2020/</link>
      <pubDate>Fri, 01 Jan 2021 22:27:51 +0200</pubDate>
      <guid>/publication/icse-seip2020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ReproducedPaper.org: Openly teaching and structuring machine learning reproducibility</title>
      <link>/publication/rrpr2021/</link>
      <pubDate>Fri, 01 Jan 2021 17:32:54 +0200</pubDate>
      <guid>/publication/rrpr2021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>How to Kill Them All: An Exploratory Study on the Impact of Code Observability on Mutation Testing</title>
      <link>/publication/jss2020/</link>
      <pubDate>Tue, 01 Dec 2020 17:32:54 +0200</pubDate>
      <guid>/publication/jss2020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Serverless Testing: Tool Vendors&#39; and Experts&#39; Point of View</title>
      <link>/publication/ieee-software2020/</link>
      <pubDate>Wed, 07 Oct 2020 10:14:08 +0200</pubDate>
      <guid>/publication/ieee-software2020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Systematic Comparison of Search-Based Approaches for LDA Hyperparameter Tuning</title>
      <link>/publication/infsoft2020/</link>
      <pubDate>Wed, 09 Sep 2020 21:50:29 +0200</pubDate>
      <guid>/publication/infsoft2020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Revisiting Test Smells in Automatically Generated Tests: Limitations, Pitfalls, and Opportunities</title>
      <link>/publication/icsme2020/</link>
      <pubDate>Tue, 04 Aug 2020 16:05:57 +0200</pubDate>
      <guid>/publication/icsme2020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>DeepTC-Enhancer: Improving the Readability of Automatically Generated Tests</title>
      <link>/publication/ase2020b/</link>
      <pubDate>Thu, 30 Jul 2020 22:27:51 +0200</pubDate>
      <guid>/publication/ase2020b/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Good Things Come In Threes: Improving Search-based Crash Reproduction With Helper Objectives</title>
      <link>/publication/ase2020a/</link>
      <pubDate>Thu, 30 Jul 2020 22:27:46 +0200</pubDate>
      <guid>/publication/ase2020a/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Generating Highly-structured Input Data by Combining Search-based Testing and Grammar-based Fuzzing</title>
      <link>/publication/ase2020-nier/</link>
      <pubDate>Mon, 06 Jul 2020 14:29:50 +0200</pubDate>
      <guid>/publication/ase2020-nier/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Botsing, a Search-based Crash Reproduction Framework for Java</title>
      <link>/publication/ase2020-tool/</link>
      <pubDate>Sun, 05 Jul 2020 14:19:53 +0200</pubDate>
      <guid>/publication/ase2020-tool/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Crash Reproduction Using Helper Objectives</title>
      <link>/publication/gecco2020/</link>
      <pubDate>Sat, 04 Jul 2020 18:56:54 +0200</pubDate>
      <guid>/publication/gecco2020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>EvoSuite at the SBST 2020 Tool Competition</title>
      <link>/publication/sbst2020/</link>
      <pubDate>Fri, 17 Apr 2020 17:56:40 +0200</pubDate>
      <guid>/publication/sbst2020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Automated Repair of Feature Interaction Failures in Automated Driving Systems</title>
      <link>/publication/issta2020/</link>
      <pubDate>Fri, 17 Apr 2020 17:32:54 +0200</pubDate>
      <guid>/publication/issta2020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>LogChunks: A Data Set for Build Log Analysis</title>
      <link>/publication/msrdata2019/</link>
      <pubDate>Tue, 03 Mar 2020 17:08:37 +0100</pubDate>
      <guid>/publication/msrdata2019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Oracle Issues in Machine Learning and Where to Find Them</title>
      <link>/publication/raise2020/</link>
      <pubDate>Tue, 03 Mar 2020 16:20:15 +0100</pubDate>
      <guid>/publication/raise2020/</guid>
      <description>&lt;p&gt;Abstract:
The rise in popularity of machine learning (ML), and deep learning in particular, has both led to optimism about achievements of artificial intelligence, as well as concerns about possible weaknesses and vulnerabilities of ML pipelines. Within the software engineering community, this has led to a considerable body of work on ML testing techniques, including white- and black-box testing for ML models. This means the oracle problem needs to be addressed; for supervised ML applications, oracle information is indeed available in the form of dataset &amp;ldquo;ground truth&amp;rdquo;, that encodes input data with corresponding desired output labels. However, while ground truth forms a gold standard, there still is no guarantee it is truly correct. Indeed, syntactic, semantic, and conceptual framing issues in the oracle may negatively affect the ML system integrity. While syntactic issues may be automatically verified and corrected, the higher-level issues traditionally need human judgment and manual analysis.
In this paper, we employ two heuristics based on information entropy and semantic analysis on well-known computer vision models and benchmark data from ImageNet. The heuristics are used to semi-automatically uncover potential higher-level issues in (i) the label taxonomy used to define the ground truth oracle (labels), and (ii) data encoding and representation. In doing this, beyond existing ML testing efforts, we illustrate the need for SE strategies that especially target and assess the oracle.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automated Test Generation for Unit Testing Beyond</title>
      <link>/talk/ipa2019/</link>
      <pubDate>Mon, 28 Oct 2019 11:17:15 +0200</pubDate>
      <guid>/talk/ipa2019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Testing with Fewer Resources: An Adaptive Approach to Performance-Aware Test Case Generation</title>
      <link>/publication/ieee-tse2019/</link>
      <pubDate>Wed, 09 Oct 2019 09:51:33 +0200</pubDate>
      <guid>/publication/ieee-tse2019/</guid>
      <description>&lt;p&gt;Abstract: Automated test case generation is an effective technique to yield high-coverage test suites.
While the majority of research effort has been devoted to satisfying coverage criteria, a recent trend emerged towards optimizing other non-coverage aspects.
In this regard, runtime and memory usage are two essential dimensions: less expensive tests reduce the resource demands for the generation process and later regression testing phases.
This study shows that performance-aware test case generation requires solving two main challenges:
providing a good approximation of resource usage with minimal overhead and&lt;br&gt;
avoiding detrimental effects on both final coverage and fault detection effectiveness.
To tackle these challenges, we conceived a set of performance proxies -inspired by previous work on performance testing- that provide a reasonable estimation of the test execution costs (i.e., runtime and memory usage).
Thus, we propose an adaptive strategy, called aDynaMOSA, which leverages these proxies by extending DynaMOSA, a state-of-the-art evolutionary algorithm in unit testing.
Our empirical study -involving 110 non-trivial Java classes- reveals
that our adaptive approach generates test suite with statistically significant improvements in runtime (-25%) and heap memory consumption (-15%) compared to DynaMOSA. Additionally, aDynaMOSA has comparable results to DynaMOSA over seven different coverage criteria and similar fault detection effectiveness.
Our empirical investigation also highlights that the usage of performance proxies (i.e., without the adaptiveness) is not sufficient to generate more performant test cases without compromising the overall coverage.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing Autonomous Cars for Feature Interaction Failures using Evolutionary Intelligence</title>
      <link>/talk/cow2019/</link>
      <pubDate>Tue, 01 Oct 2019 11:17:15 +0200</pubDate>
      <guid>/talk/cow2019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>JCOMIX: A Search-Based Tool to Detect XML Injection Vulnerabilities in Web Applications</title>
      <link>/publication/esec-fse2019/</link>
      <pubDate>Wed, 26 Jun 2019 10:41:41 +0200</pubDate>
      <guid>/publication/esec-fse2019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Catcher</title>
      <link>/tools/catcher/</link>
      <pubDate>Wed, 26 Jun 2019 10:29:32 +0200</pubDate>
      <guid>/tools/catcher/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Cling</title>
      <link>/tools/cling/</link>
      <pubDate>Wed, 26 Jun 2019 10:29:32 +0200</pubDate>
      <guid>/tools/cling/</guid>
      <description>&lt;p&gt;Towards Integration-Level Test Case Generation Using Call Site Information&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Search-Based-LDA</title>
      <link>/tools/ssbse-lda/</link>
      <pubDate>Wed, 26 Jun 2019 10:29:32 +0200</pubDate>
      <guid>/tools/ssbse-lda/</guid>
      <description>&lt;p&gt;A Systematic Comparison of Search Algorithms for Topic Modelling - A Study on DuplicateBug Report Identification&lt;/p&gt;
&lt;h3 id=&#34;author&#34;&gt;Author&lt;/h3&gt;
&lt;p&gt;Annibale Panichella&lt;/p&gt;
&lt;h3 id=&#34;venue&#34;&gt;Venue&lt;/h3&gt;
&lt;p&gt;SSBSE 2019&lt;/p&gt;
&lt;h4 id=&#34;abstract&#34;&gt;Abstract&lt;/h4&gt;
&lt;p&gt;Latent Dirichlet Allocation (LDA) has been used to supportmany software engineering tasks. Previous studies showed that defaultsettings lead to sub-optimal topic modeling with a dramatic impacton the performance of such approaches in terms of precision andrecall. For this reason, researchers used search algorithms (e.g., geneticalgorithms) to automatically configure topic models in an unsupervisedfashion. While previous work showed the ability of individual search algorithmsin finding near-optimal configurations, it is not clear to whatextent the choice of the meta-heuristic matters for SE tasks. In this paper,we present a systematic comparison of five different meta-heuristicsto configure LDA in the context of duplicate bug reports identification.The results show that (1) no master algorithm outperforms the othersfor all software projects, (2) random search and PSO are the least effectivemeta-heuristics. Finally, the running time strongly depends on thecomputational complexity of LDA while the internal complexity of thesearch algorithms plays a negligible role.&lt;/p&gt;
&lt;h3 id=&#34;getting-started&#34;&gt;Getting started&lt;/h3&gt;
&lt;p&gt;The source code is available in GitHub at the link: &lt;a href=&#34;https://github.com/apanichella/Search-Based-LDA&#34;&gt;https://github.com/apanichella/Search-Based-LDA&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Effective and Efficient API Misuse Detection via Exception Propagation and Search-based Testing</title>
      <link>/publication/issta2019/</link>
      <pubDate>Wed, 01 May 2019 20:22:51 +0200</pubDate>
      <guid>/publication/issta2019/</guid>
      <description>&lt;p&gt;&lt;b&gt; Abstract &lt;/b&gt;: Application Programming Interfaces (APIs)
typically come with (implicit) usage constraints.
The violations of these constraints (API misuses)
can lead to software crashes.
Even though there are several tools that
can detect API misuses,
most of them suffer from a very high rate of false positives.
We introduce Catcher, a novel API misuse detection approach
that combines static exception propagation analysis with automatic search-based test case
generation to effectively and efficiently pinpoint crash-prone API misuses
in client applications.
We validate Catcher against 21 Java applications,
targeting misuses of the Java platform&amp;rsquo;s API.
Our results indicate that Catcher is able to generate
test cases that uncover 243 (unique) API misuses that result in
crashes.
Our empirical evaluation shows that Catcher can detect a large number of misuses (77 cases)
that would remain undetected by the traditional coverage-based test case generator EvoSuite.
Additionally, Catcher is on average eight times faster than EvoSuite
in generating test cases for the identified misuses.
Finally, we find that the majority of the exceptions triggered by Catcher
are unexpected to developers i.e., not only unhandled in the source code but also not listed in the documentation of the client applications.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Systematic Comparison of Search Algorithms for Topic Modelling - A Study on Duplicate Bug Report Identification</title>
      <link>/publication/ssbse2019/</link>
      <pubDate>Mon, 29 Apr 2019 23:16:23 +0200</pubDate>
      <guid>/publication/ssbse2019/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;p&gt;Latent Dirichlet Allocation (LDA) has been used to support many software engineering tasks. Previous studies showed that default settings lead to sub-optimal topic modeling with a dramatic impact on the performance of such approaches in terms of precision and recall. For this reason, researchers used search algorithms (e.g., genetic algorithms) to automatically configure topic models in an unsupervised fashion. While previous work showed the ability of individual search algorithms in finding near-optimal configurations, it is not clear to what extent the choice of the meta-heuristic matters for SE tasks. In this paper, we present a systematic comparison of five different meta-heuristics to configure LDA in the context of duplicate bug reports identification. The results show that (1) no master algorithm outperforms the others for all software projects, (2) random search and PSO are the least effective meta-heuristics. Finally, the running time strongly depends on the computational complexity of LDA while the internal complexity of the search algorithms plays a negligible role.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AGE-MOEA</title>
      <link>/tools/age-moea/</link>
      <pubDate>Mon, 08 Apr 2019 11:08:54 +0200</pubDate>
      <guid>/tools/age-moea/</guid>
      <description>&lt;h3 id=&#34;title&#34;&gt;Title&lt;/h3&gt;
&lt;p&gt;An Adaptive Evolutionary Algorithm based on Non-Euclidean Geometry for Many-objective Optimization&lt;/p&gt;
&lt;h3 id=&#34;author&#34;&gt;Author&lt;/h3&gt;
&lt;p&gt;Annibale Panichella&lt;/p&gt;
&lt;h3 id=&#34;venue&#34;&gt;Venue&lt;/h3&gt;
&lt;p&gt;GECCO 2019&lt;/p&gt;
&lt;h4 id=&#34;abstract&#34;&gt;Abstract&lt;/h4&gt;
&lt;p&gt;In the last decade, several evolutionary algorithms have been proposed in the literature for solving multi- and many-objective optimization problems. The performance of such algorithms depends on their capability to produce a well-diversified front (diversity) that is as closer to the Pareto optimal front as possible (proximity). Diversity and proximity strongly depend on the geometry of the Pareto front, i.e., whether it forms a Euclidean, spherical or hyperbolic hypersurface.  However, existing multi- and many-objective evolutionary algorithms show poor versatility on different geometries. To address this issue, we propose a novel evolutionary algorithm that: (1) estimates the geometry of the generated front using a fast procedure with O(MxN) computational complexity (M is the number of objectives and N is the population size); (2) adapts the diversity and proximity metrics accordingly. Therefore, to form the population for the next generation, solutions are selected based on their contribution to the diversity and proximity of the non-dominated front with regards to the estimated geometry. Computational experiments show that the proposed algorithm outperforms state-of-the-art multi and many-objective evolutionary algorithms on benchmark test problems with different geometries and number of objectives (M=3,5, and 10).&lt;/p&gt;
&lt;h3 id=&#34;getting-started&#34;&gt;Getting started&lt;/h3&gt;
&lt;p&gt;The source code of AGE-MOEA can be downloaded: &lt;a href=&#34;https://github.com/apanichella/PlatEMO&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AGE-MOEA is implemented as a module (algorithm) to include in the platform &lt;a href=&#34;https://github.com/BIMK/PlatEMO&#34;&gt;PlatEMO&lt;/a&gt;.
Download the zip file (see link above) and extract its content in the folder &lt;code&gt;Algorithms&lt;/code&gt; of &lt;code&gt;PlatEMO&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DevOps for Complex Cyber-physical Systems</title>
      <link>/project/cosmos/</link>
      <pubDate>Mon, 08 Apr 2019 11:08:54 +0200</pubDate>
      <guid>/project/cosmos/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Software Testing Amplification for the DevOps Team</title>
      <link>/project/stamp/</link>
      <pubDate>Mon, 08 Apr 2019 11:08:54 +0200</pubDate>
      <guid>/project/stamp/</guid>
      <description></description>
    </item>
    
    <item>
      <title>University Blockchain Research Initiative </title>
      <link>/project/ripple/</link>
      <pubDate>Mon, 08 Apr 2019 11:08:49 +0200</pubDate>
      <guid>/project/ripple/</guid>
      <description></description>
    </item>
    
    <item>
      <title>An Adaptive Evolutionary Algorithm based on Non-Euclidean Geometry for Many-objective Optimization</title>
      <link>/publication/gecco2019/</link>
      <pubDate>Mon, 08 Apr 2019 10:45:30 +0200</pubDate>
      <guid>/publication/gecco2019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>EvoSuite at the SBST 2019 Tool Competition</title>
      <link>/publication/sbst2019b/</link>
      <pubDate>Mon, 08 Apr 2019 10:41:50 +0200</pubDate>
      <guid>/publication/sbst2019b/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Beyond Unit-Testing in Search-based Test Case Generation: Challenges and Opportunities</title>
      <link>/publication/sbst2019a/</link>
      <pubDate>Mon, 08 Apr 2019 10:39:03 +0200</pubDate>
      <guid>/publication/sbst2019a/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search-based Multi-Vulnerability Testing of XML Injections in Web Applications</title>
      <link>/publication/emse2019/</link>
      <pubDate>Mon, 08 Apr 2019 10:11:19 +0200</pubDate>
      <guid>/publication/emse2019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Speeding-up Software Testing using Computational intelligence</title>
      <link>/talk/sen2019/</link>
      <pubDate>Fri, 01 Feb 2019 11:17:15 +0200</pubDate>
      <guid>/talk/sen2019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Test Case Prioritization Genetic Algorithm guided by the Hypervolume Indicator</title>
      <link>/publication/ieee-tse2018f/</link>
      <pubDate>Sat, 08 Sep 2018 11:51:02 +0200</pubDate>
      <guid>/publication/ieee-tse2018f/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Large Scale Empirical Comparison of State-of-the-art Search-based Test Case Generators</title>
      <link>/publication/infsof2018b/</link>
      <pubDate>Sat, 18 Aug 2018 07:39:53 +0200</pubDate>
      <guid>/publication/infsof2018b/</guid>
      <description></description>
    </item>
    
    <item>
      <title>On the Impact of Code Smells on the Energy Consumption of Mobile Applications</title>
      <link>/publication/infsoft2018a/</link>
      <pubDate>Mon, 13 Aug 2018 19:14:00 +0200</pubDate>
      <guid>/publication/infsoft2018a/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search-Based Crash Reproduction and Its Impact on Debugging</title>
      <link>/publication/ieee-tse2018e/</link>
      <pubDate>Mon, 13 Aug 2018 18:55:36 +0200</pubDate>
      <guid>/publication/ieee-tse2018e/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Incremental Control Dependency Frontier Exploration for Many-Criteria Test Case Generation</title>
      <link>/publication/ssbse2018b/</link>
      <pubDate>Fri, 20 Jul 2018 00:07:54 +0200</pubDate>
      <guid>/publication/ssbse2018b/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Single-objective versus Multi-Objectivized Optimization for Evolutionary Crash Reproduction</title>
      <link>/publication/ssbse2018a/</link>
      <pubDate>Fri, 20 Jul 2018 00:06:34 +0200</pubDate>
      <guid>/publication/ssbse2018a/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Search-based Approach for Accurate Identification of Log Message Formats</title>
      <link>/publication/icpc2018/</link>
      <pubDate>Fri, 20 Jul 2018 00:05:13 +0200</pubDate>
      <guid>/publication/icpc2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search-Based Test Data Generation for SQL Queries</title>
      <link>/publication/icse2018/</link>
      <pubDate>Fri, 20 Jul 2018 00:04:04 +0200</pubDate>
      <guid>/publication/icse2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>An Investigation of Compression Techniques to Speed up Mutation Testing</title>
      <link>/publication/icst2018/</link>
      <pubDate>Fri, 20 Jul 2018 00:03:02 +0200</pubDate>
      <guid>/publication/icst2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Testing Autonomous Cars for Feature Interaction Failures using Many-Objective Search</title>
      <link>/publication/ase2018/</link>
      <pubDate>Fri, 20 Jul 2018 00:01:56 +0200</pubDate>
      <guid>/publication/ase2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Java Unit Testing Tool Competition - Sixth Round</title>
      <link>/publication/sbst2018/</link>
      <pubDate>Fri, 20 Jul 2018 00:01:14 +0200</pubDate>
      <guid>/publication/sbst2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Scent of a Smell: An Extensive Comparison between Textual and Structural Smells</title>
      <link>/publication/ieee-tse2018d/</link>
      <pubDate>Tue, 10 Jul 2018 11:25:49 +0200</pubDate>
      <guid>/publication/ieee-tse2018d/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Developer Testing in The IDE: Patterns, Beliefs, And Behavior</title>
      <link>/publication/ieee-tse2018c/</link>
      <pubDate>Tue, 10 Jul 2018 11:24:46 +0200</pubDate>
      <guid>/publication/ieee-tse2018c/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Automated Test Case Generation as a Many-Objective Optimisation Problem with Dynamic Selection of the Targets</title>
      <link>/publication/ieee-tse2018b/</link>
      <pubDate>Tue, 10 Jul 2018 11:23:34 +0200</pubDate>
      <guid>/publication/ieee-tse2018b/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Automatic Generation of Tests to Exploit XML Injection Vulnerabilities in Web Applications</title>
      <link>/publication/ieee-tse2018a/</link>
      <pubDate>Tue, 10 Jul 2018 11:21:45 +0200</pubDate>
      <guid>/publication/ieee-tse2018a/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Machine Learning- Driven Evolutionary Approach for Testing Web Application Firewalls</title>
      <link>/publication/ieee-tr2018/</link>
      <pubDate>Tue, 10 Jul 2018 11:11:22 +0200</pubDate>
      <guid>/publication/ieee-tr2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Systematic Literature Review of How Mutation Testing Supports Quality Assurance Processes</title>
      <link>/publication/stvr2018/</link>
      <pubDate>Tue, 10 Jul 2018 11:11:22 +0200</pubDate>
      <guid>/publication/stvr2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Lightweight Detection of Android-specific Code Smells: the aDoctor Project</title>
      <link>/publication/saner2017b/</link>
      <pubDate>Sun, 13 Aug 2017 20:10:28 +0200</pubDate>
      <guid>/publication/saner2017b/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Software-Based Energy Profiling of Android Apps: Simple, Efficient and Reliable</title>
      <link>/publication/saner2017a/</link>
      <pubDate>Sun, 13 Aug 2017 20:08:32 +0200</pubDate>
      <guid>/publication/saner2017a/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Speeding-Up Mutation Testing via Data Compression and State Infection</title>
      <link>/publication/icstw2017/</link>
      <pubDate>Sun, 13 Aug 2017 20:06:48 +0200</pubDate>
      <guid>/publication/icstw2017/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Java Unit Testing Tool Competition - Fifth Round</title>
      <link>/publication/sbst2017/</link>
      <pubDate>Sun, 13 Aug 2017 20:05:07 +0200</pubDate>
      <guid>/publication/sbst2017/</guid>
      <description></description>
    </item>
    
    <item>
      <title>PETrA: a Software-Based Tool for Estimating the Energy Profile of Android Applications</title>
      <link>/publication/icse2017-tool/</link>
      <pubDate>Sun, 13 Aug 2017 19:37:11 +0200</pubDate>
      <guid>/publication/icse2017-tool/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Guided Genetic Algorithm for Automated Crash Reproduction</title>
      <link>/publication/icse2017/</link>
      <pubDate>Sun, 13 Aug 2017 19:34:17 +0200</pubDate>
      <guid>/publication/icse2017/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Automatically Repairing Web Application Firewalls Based on Successful SQL Injection Attacks</title>
      <link>/publication/issre2018/</link>
      <pubDate>Sun, 13 Aug 2017 19:28:13 +0200</pubDate>
      <guid>/publication/issre2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>LIPS vs MOSA: a Replicated Empirical Study on Automated Test Case Generation</title>
      <link>/publication/ssbse2017/</link>
      <pubDate>Thu, 13 Jul 2017 20:03:02 +0200</pubDate>
      <guid>/publication/ssbse2017/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Parameterizing and Assembling IR-based Solutions for Software Engineering Tasks using Genetic Algorithms</title>
      <link>/publication/saner2016/</link>
      <pubDate>Thu, 18 Aug 2016 08:00:46 +0200</pubDate>
      <guid>/publication/saner2016/</guid>
      <description></description>
    </item>
    
    <item>
      <title>On the Diffusion of Test Smells in Automatically Generated Test Code: An Empirical Study</title>
      <link>/publication/sbst2016b/</link>
      <pubDate>Thu, 18 Aug 2016 07:59:02 +0200</pubDate>
      <guid>/publication/sbst2016b/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Evolutionary Testing for Crash Reproduction</title>
      <link>/publication/sbst2016a/</link>
      <pubDate>Thu, 18 Aug 2016 07:56:19 +0200</pubDate>
      <guid>/publication/sbst2016a/</guid>
      <description></description>
    </item>
    
    <item>
      <title>How to Catch &#39;Em All: WatchDog, a Family of IDE Plug-Ins to Assess Testing</title>
      <link>/publication/serip2016/</link>
      <pubDate>Thu, 18 Aug 2016 07:54:15 +0200</pubDate>
      <guid>/publication/serip2016/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Textual-based Technique for Smell Detection</title>
      <link>/publication/icpc2016/</link>
      <pubDate>Thu, 18 Aug 2016 07:52:50 +0200</pubDate>
      <guid>/publication/icpc2016/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Continuous Delivery Practices in a Large Financial Organization</title>
      <link>/publication/icsme2016/</link>
      <pubDate>Thu, 18 Aug 2016 07:51:10 +0200</pubDate>
      <guid>/publication/icsme2016/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Search-based Training Algorithm for Cost-aware Prediction</title>
      <link>/publication/gecco2016/</link>
      <pubDate>Thu, 18 Aug 2016 07:47:34 +0200</pubDate>
      <guid>/publication/gecco2016/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Automatic Test Case Generation: What If Test Code Quality Matters?</title>
      <link>/publication/issta2016/</link>
      <pubDate>Thu, 18 Aug 2016 07:45:36 +0200</pubDate>
      <guid>/publication/issta2016/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The impact of test case summaries on bug fixing performance: An empirical investigation</title>
      <link>/publication/icse2016/</link>
      <pubDate>Thu, 18 Aug 2016 07:43:26 +0200</pubDate>
      <guid>/publication/icse2016/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Defect Prediction as a Multi-Objective Optimization Problem</title>
      <link>/publication/stvr2015/</link>
      <pubDate>Sun, 19 Jul 2015 23:50:41 +0200</pubDate>
      <guid>/publication/stvr2015/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Improving Multi-Objective Search Based Test Suite Optimization through Diversity Injection</title>
      <link>/publication/tse2015/</link>
      <pubDate>Sun, 19 Jul 2015 23:46:36 +0200</pubDate>
      <guid>/publication/tse2015/</guid>
      <description>&lt;p&gt;Abstract:
A way to reduce the cost of regression testing consists of selecting or prioritizing subsets of test cases from a test suite according to some criteria. Besides greedy algorithms, cost cognizant additional greedy algorithms, multi-objective optimization algorithms, and multi-objective genetic algorithms (MOGAs), have also been proposed to tackle this problem. However, previous studies have shown that there is no clear winner between greedy and MOGAs, and that their combination does not necessarily produce better results. In this paper we show that the optimality of MOGAs can be significantly improved by diversifying the solutions (sub-sets of the test suite) generated during the search process. Specifically, we introduce a new MOGA, coined as DIversity based Genetic Algorithm (DIV-GA), based on the mechanisms of orthogonal design and orthogonal evolution that increase diversity by injecting new orthogonal individuals during the search process. Results of an empirical study conducted on eleven programs show that DIV-GA outperforms both greedy algorithms and the traditional MOGAs from the optimality point of view. Moreover, the solutions (sub-sets of the test suite) provided by DIV-GA are able to detect more faults than the other algorithms, while keeping the same test execution cost.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Labeling Source Code with Information Retrieval Methods: An Empirical Study.</title>
      <link>/publication/emse2014/</link>
      <pubDate>Sat, 19 Jul 2014 23:52:54 +0200</pubDate>
      <guid>/publication/emse2014/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Improving IR-based traceability recovery via noun-based indexing of software artifacts</title>
      <link>/publication/jse2012/</link>
      <pubDate>Thu, 19 Jul 2012 23:55:49 +0200</pubDate>
      <guid>/publication/jse2012/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Applying a Smoothing Filter to Improve IR-based Traceability Recovery Processes: An Empirical Investigation.</title>
      <link>/publication/infsoft/</link>
      <pubDate>Thu, 19 Jul 2012 23:54:19 +0200</pubDate>
      <guid>/publication/infsoft/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>

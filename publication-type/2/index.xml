<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2 | Annibale Panichella</title>
    <link>/publication-type/2/</link>
      <atom:link href="/publication-type/2/index.xml" rel="self" type="application/rss+xml" />
    <description>2</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Mon, 12 Dec 2022 11:11:22 +0200</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>2</title>
      <link>/publication-type/2/</link>
    </image>
    
    <item>
      <title>JUGE: An Infrastructure for Benchmarking Java Unit Test Generators</title>
      <link>/publication/stvr2022/</link>
      <pubDate>Mon, 12 Dec 2022 11:11:22 +0200</pubDate>
      <guid>/publication/stvr2022/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Continuous Integration and Delivery practices for Cyber- Physical systems: An interview-based study</title>
      <link>/publication/acm-tosem2022b/</link>
      <pubDate>Fri, 11 Nov 2022 11:21:45 +0200</pubDate>
      <guid>/publication/acm-tosem2022b/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Generating Class-Level Integration Tests Using Call Site Information</title>
      <link>/publication/ieee-tse2022/</link>
      <pubDate>Tue, 13 Sep 2022 09:29:14 +0200</pubDate>
      <guid>/publication/ieee-tse2022/</guid>
      <description>&lt;p&gt;Abstract: Search-based approaches have been used in the literature to automate the process of creating unit test cases. However, related work has shown that generated tests with high code coverage could be ineffective, i.e., they may not detect all faults or kill all injected mutants. In this paper, we propose CLING, an integration-level test case generation approach that exploits how a pair of classes, the caller and the callee, interact with each other through method calls. In particular, CLING generates integration-level test cases that maximize the Coupled Branches Criterion (CBC). Coupled branches are pairs of branches containing a branch of the caller and a branch of the callee such that an integration test that exercises the former also exercises the latter. CBC is a novel integration-level coverage criterion, measuring the degree to which a test suite exercises the interactions between a caller and its callee classes. We implemented CLING and evaluated the approach on 140 pairs of classes from five different open-source Java projects. Our results show that (1) CLING generates test suites with high CBC coverage, thanks to the definition of the test suite generation as a many-objectives problem where each couple of branches is an independent objective; (2) such generated suites trigger different class interactions and can kill on average 7.7% (with a maximum of 50%) of mutants that are not detected by tests generated randomly or at the unit level; (3) CLING can detect integration faults coming from wrong assumptions about the usage of the callee class (25 for our subject systems) that remain undetected when using automatically generated random and unit-level test suites.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Test Smells 20 Years Later: Detectability, Validity, and Reliability</title>
      <link>/publication/emse2022/</link>
      <pubDate>Thu, 21 Jul 2022 11:34:14 +0200</pubDate>
      <guid>/publication/emse2022/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Single and Multi-objective Test Cases Prioritization for Self-driving Cars in Virtual Environments</title>
      <link>/publication/acm-tosem2022/</link>
      <pubDate>Mon, 04 Apr 2022 11:21:45 +0200</pubDate>
      <guid>/publication/acm-tosem2022/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Large scale inverse design of planar on-chip mode sorter</title>
      <link>/publication/acsphotonics2022/</link>
      <pubDate>Sat, 01 Jan 2022 09:57:31 +0100</pubDate>
      <guid>/publication/acsphotonics2022/</guid>
      <description></description>
    </item>
    
    <item>
      <title>How to Kill Them All: An Exploratory Study on the Impact of Code Observability on Mutation Testing</title>
      <link>/publication/jss2020/</link>
      <pubDate>Tue, 01 Dec 2020 17:32:54 +0200</pubDate>
      <guid>/publication/jss2020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Serverless Testing: Tool Vendors&#39; and Experts&#39; Point of View</title>
      <link>/publication/ieee-software2020/</link>
      <pubDate>Wed, 07 Oct 2020 10:14:08 +0200</pubDate>
      <guid>/publication/ieee-software2020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Systematic Comparison of Search-Based Approaches for LDA Hyperparameter Tuning</title>
      <link>/publication/infsoft2020/</link>
      <pubDate>Wed, 09 Sep 2020 21:50:29 +0200</pubDate>
      <guid>/publication/infsoft2020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Testing with Fewer Resources: An Adaptive Approach to Performance-Aware Test Case Generation</title>
      <link>/publication/ieee-tse2019/</link>
      <pubDate>Wed, 09 Oct 2019 09:51:33 +0200</pubDate>
      <guid>/publication/ieee-tse2019/</guid>
      <description>&lt;p&gt;Abstract: Automated test case generation is an effective technique to yield high-coverage test suites.
While the majority of research effort has been devoted to satisfying coverage criteria, a recent trend emerged towards optimizing other non-coverage aspects.
In this regard, runtime and memory usage are two essential dimensions: less expensive tests reduce the resource demands for the generation process and later regression testing phases.
This study shows that performance-aware test case generation requires solving two main challenges:
providing a good approximation of resource usage with minimal overhead and&lt;br&gt;
avoiding detrimental effects on both final coverage and fault detection effectiveness.
To tackle these challenges, we conceived a set of performance proxies -inspired by previous work on performance testing- that provide a reasonable estimation of the test execution costs (i.e., runtime and memory usage).
Thus, we propose an adaptive strategy, called aDynaMOSA, which leverages these proxies by extending DynaMOSA, a state-of-the-art evolutionary algorithm in unit testing.
Our empirical study -involving 110 non-trivial Java classes- reveals
that our adaptive approach generates test suite with statistically significant improvements in runtime (-25%) and heap memory consumption (-15%) compared to DynaMOSA. Additionally, aDynaMOSA has comparable results to DynaMOSA over seven different coverage criteria and similar fault detection effectiveness.
Our empirical investigation also highlights that the usage of performance proxies (i.e., without the adaptiveness) is not sufficient to generate more performant test cases without compromising the overall coverage.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Search-based Multi-Vulnerability Testing of XML Injections in Web Applications</title>
      <link>/publication/emse2019/</link>
      <pubDate>Mon, 08 Apr 2019 10:11:19 +0200</pubDate>
      <guid>/publication/emse2019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Test Case Prioritization Genetic Algorithm guided by the Hypervolume Indicator</title>
      <link>/publication/ieee-tse2018f/</link>
      <pubDate>Sat, 08 Sep 2018 11:51:02 +0200</pubDate>
      <guid>/publication/ieee-tse2018f/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Large Scale Empirical Comparison of State-of-the-art Search-based Test Case Generators</title>
      <link>/publication/infsof2018b/</link>
      <pubDate>Sat, 18 Aug 2018 07:39:53 +0200</pubDate>
      <guid>/publication/infsof2018b/</guid>
      <description></description>
    </item>
    
    <item>
      <title>On the Impact of Code Smells on the Energy Consumption of Mobile Applications</title>
      <link>/publication/infsoft2018a/</link>
      <pubDate>Mon, 13 Aug 2018 19:14:00 +0200</pubDate>
      <guid>/publication/infsoft2018a/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search-Based Crash Reproduction and Its Impact on Debugging</title>
      <link>/publication/ieee-tse2018e/</link>
      <pubDate>Mon, 13 Aug 2018 18:55:36 +0200</pubDate>
      <guid>/publication/ieee-tse2018e/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Scent of a Smell: An Extensive Comparison between Textual and Structural Smells</title>
      <link>/publication/ieee-tse2018d/</link>
      <pubDate>Tue, 10 Jul 2018 11:25:49 +0200</pubDate>
      <guid>/publication/ieee-tse2018d/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Developer Testing in The IDE: Patterns, Beliefs, And Behavior</title>
      <link>/publication/ieee-tse2018c/</link>
      <pubDate>Tue, 10 Jul 2018 11:24:46 +0200</pubDate>
      <guid>/publication/ieee-tse2018c/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Automated Test Case Generation as a Many-Objective Optimisation Problem with Dynamic Selection of the Targets</title>
      <link>/publication/ieee-tse2018b/</link>
      <pubDate>Tue, 10 Jul 2018 11:23:34 +0200</pubDate>
      <guid>/publication/ieee-tse2018b/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Automatic Generation of Tests to Exploit XML Injection Vulnerabilities in Web Applications</title>
      <link>/publication/ieee-tse2018a/</link>
      <pubDate>Tue, 10 Jul 2018 11:21:45 +0200</pubDate>
      <guid>/publication/ieee-tse2018a/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Machine Learning- Driven Evolutionary Approach for Testing Web Application Firewalls</title>
      <link>/publication/ieee-tr2018/</link>
      <pubDate>Tue, 10 Jul 2018 11:11:22 +0200</pubDate>
      <guid>/publication/ieee-tr2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Systematic Literature Review of How Mutation Testing Supports Quality Assurance Processes</title>
      <link>/publication/stvr2018/</link>
      <pubDate>Tue, 10 Jul 2018 11:11:22 +0200</pubDate>
      <guid>/publication/stvr2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Defect Prediction as a Multi-Objective Optimization Problem</title>
      <link>/publication/stvr2015/</link>
      <pubDate>Sun, 19 Jul 2015 23:50:41 +0200</pubDate>
      <guid>/publication/stvr2015/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Improving Multi-Objective Search Based Test Suite Optimization through Diversity Injection</title>
      <link>/publication/tse2015/</link>
      <pubDate>Sun, 19 Jul 2015 23:46:36 +0200</pubDate>
      <guid>/publication/tse2015/</guid>
      <description>&lt;p&gt;Abstract:
A way to reduce the cost of regression testing consists of selecting or prioritizing subsets of test cases from a test suite according to some criteria. Besides greedy algorithms, cost cognizant additional greedy algorithms, multi-objective optimization algorithms, and multi-objective genetic algorithms (MOGAs), have also been proposed to tackle this problem. However, previous studies have shown that there is no clear winner between greedy and MOGAs, and that their combination does not necessarily produce better results. In this paper we show that the optimality of MOGAs can be significantly improved by diversifying the solutions (sub-sets of the test suite) generated during the search process. Specifically, we introduce a new MOGA, coined as DIversity based Genetic Algorithm (DIV-GA), based on the mechanisms of orthogonal design and orthogonal evolution that increase diversity by injecting new orthogonal individuals during the search process. Results of an empirical study conducted on eleven programs show that DIV-GA outperforms both greedy algorithms and the traditional MOGAs from the optimality point of view. Moreover, the solutions (sub-sets of the test suite) provided by DIV-GA are able to detect more faults than the other algorithms, while keeping the same test execution cost.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Labeling Source Code with Information Retrieval Methods: An Empirical Study.</title>
      <link>/publication/emse2014/</link>
      <pubDate>Sat, 19 Jul 2014 23:52:54 +0200</pubDate>
      <guid>/publication/emse2014/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Improving IR-based traceability recovery via noun-based indexing of software artifacts</title>
      <link>/publication/jse2012/</link>
      <pubDate>Thu, 19 Jul 2012 23:55:49 +0200</pubDate>
      <guid>/publication/jse2012/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Applying a Smoothing Filter to Improve IR-based Traceability Recovery Processes: An Empirical Investigation.</title>
      <link>/publication/infsoft/</link>
      <pubDate>Thu, 19 Jul 2012 23:54:19 +0200</pubDate>
      <guid>/publication/infsoft/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>

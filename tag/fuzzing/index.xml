<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fuzzing | Annibale Panichella</title>
    <link>https://example.com/tag/fuzzing/</link>
      <atom:link href="https://example.com/tag/fuzzing/index.xml" rel="self" type="application/rss+xml" />
    <description>Fuzzing</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Mon, 05 May 2025 14:29:50 +0200</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Fuzzing</title>
      <link>https://example.com/tag/fuzzing/</link>
    </image>
    
    <item>
      <title>Automated Test-Case Generation for REST APIs Using Model Inference Search Heuristic</title>
      <link>https://example.com/publication/ast2025/</link>
      <pubDate>Mon, 05 May 2025 14:29:50 +0200</pubDate>
      <guid>https://example.com/publication/ast2025/</guid>
      <description>&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;The rising popularity of the microservice architectural style has led to a growing demand for automated testing approaches tailored to these systems. EvoMaster is a state-of-the-art tool that uses Evolutionary Algorithms (EAs) to automatically generate test cases for microservices’ REST APIs. One limitation of these EAs is the use of unit-level search heuristics, such as branch distances, which focus on fine-grained code coverage and may not effectively capture the complex, interconnected behaviors characteristic of system-level testing. To address this limitation, we propose a new search heuristic (MISH) that uses real-time automaton learning to guide the test case generation process. We capture the sequential call patterns exhibited by a test case by learning an automaton from the stream of log events outputted by different microservices within the same system. Therefore, MISH learns a representation of the systemwide behavior, allowing us to define the fitness of a test case based on the path it traverses within the inferred automaton. We empirically evaluate MISH’s effectiveness on six real-world benchmark microservice applications and compare it against a state-of-the-art technique, MOSA, for testing REST APIs. Our evaluation shows promising results for using MISH to guide the automated test case generation within EvoMaster&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DRVN at the ICST 2025 Tool Competition – Self-Driving Car Testing Track</title>
      <link>https://example.com/publication/icst2025-competition/</link>
      <pubDate>Wed, 01 Jan 2025 00:03:02 +0100</pubDate>
      <guid>https://example.com/publication/icst2025-competition/</guid>
      <description>&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;DRVN is a regression testing tool that aims to diversify the test scenarios (road maps) to execute for testing and validating self-driving cars. DRVN harnesses the power of convolutional neural networks to identify possible failing roads in a set of generated examples before applying a greedy algorithm that selects and prioritizes the most diverse roads during regression testing. Initial testing discovered that DRVN performed well against random-based test selection.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rocket: A System-Level Fuzz-Testing Framework for the XRPL Consensus Algorithm</title>
      <link>https://example.com/publication/icst2025-tool/</link>
      <pubDate>Wed, 01 Jan 2025 00:03:02 +0100</pubDate>
      <guid>https://example.com/publication/icst2025-tool/</guid>
      <description>&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Byzantine fault tolerant algorithms are critical for achieving consistency and reliability in distributed systems, especially in the presence of faults or adversarial behavior. The consensus algorithm used by the XRP Ledger falls into this category. In practice, the implementation of these algorithms is prone to errors, which can lead to undesired behavior in the system. This paper introduces Rocket, a fuzz-testing framework designed for the XRPL consensus algorithm. Rocket enables researchers and developers to automatically inject network and process faults into a locally simulated network of XRPL validator nodes to test if the system behaves as expected. This technique has previously been shown to be effective in finding implementation errors. Rocket has been designed to focus on extensibility and ease of use, enabling users to run complex test scenarios with minimal setup. Video: &lt;a href=&#34;https://www.youtube.com/watch?v=07Z3ufRa51Y&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=07Z3ufRa51Y&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Generating Class-Level Integration Tests Using Call Site Information</title>
      <link>https://example.com/publication/ieee-tse2022/</link>
      <pubDate>Tue, 13 Sep 2022 09:29:14 +0200</pubDate>
      <guid>https://example.com/publication/ieee-tse2022/</guid>
      <description>&lt;p&gt;Abstract: Search-based approaches have been used in the literature to automate the process of creating unit test cases. However, related work has shown that generated tests with high code coverage could be ineffective, i.e., they may not detect all faults or kill all injected mutants. In this paper, we propose CLING, an integration-level test case generation approach that exploits how a pair of classes, the caller and the callee, interact with each other through method calls. In particular, CLING generates integration-level test cases that maximize the Coupled Branches Criterion (CBC). Coupled branches are pairs of branches containing a branch of the caller and a branch of the callee such that an integration test that exercises the former also exercises the latter. CBC is a novel integration-level coverage criterion, measuring the degree to which a test suite exercises the interactions between a caller and its callee classes. We implemented CLING and evaluated the approach on 140 pairs of classes from five different open-source Java projects. Our results show that (1) CLING generates test suites with high CBC coverage, thanks to the definition of the test suite generation as a many-objectives problem where each couple of branches is an independent objective; (2) such generated suites trigger different class interactions and can kill on average 7.7% (with a maximum of 50%) of mutants that are not detected by tests generated randomly or at the unit level; (3) CLING can detect integration faults coming from wrong assumptions about the usage of the callee class (25 for our subject systems) that remain undetected when using automatically generated random and unit-level test suites.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Guiding Automated Test Case Generation for Transaction-Reverting Statements in Smart Contracts</title>
      <link>https://example.com/publication/icsme2022/</link>
      <pubDate>Sat, 11 Jun 2022 18:43:48 +0200</pubDate>
      <guid>https://example.com/publication/icsme2022/</guid>
      <description></description>
    </item>
    
    <item>
      <title>SynTest-Solidity: Automated Test Case Generation and Fuzzing for Smart Contracts</title>
      <link>https://example.com/publication/icse-demo2022/</link>
      <pubDate>Tue, 18 Jan 2022 14:29:50 +0200</pubDate>
      <guid>https://example.com/publication/icse-demo2022/</guid>
      <description></description>
    </item>
    
    <item>
      <title>What Are We Really Testing in Mutation Testing for Machine Learning? A Critical Reflection</title>
      <link>https://example.com/publication/icse-nier2020/</link>
      <pubDate>Mon, 18 Jan 2021 14:29:50 +0200</pubDate>
      <guid>https://example.com/publication/icse-nier2020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Generating Highly-structured Input Data by Combining Search-based Testing and Grammar-based Fuzzing</title>
      <link>https://example.com/publication/ase2020-nier/</link>
      <pubDate>Mon, 06 Jul 2020 14:29:50 +0200</pubDate>
      <guid>https://example.com/publication/ase2020-nier/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>

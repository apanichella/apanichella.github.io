<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>software testing | Annibale Panichella</title>
    <link>/tag/software-testing/</link>
      <atom:link href="/tag/software-testing/index.xml" rel="self" type="application/rss+xml" />
    <description>software testing</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Mon, 19 Apr 2021 09:03:56 +0200</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>software testing</title>
      <link>/tag/software-testing/</link>
    </image>
    
    <item>
      <title>Automated Repair of Feature Interaction Failures in Automated Driving Systems</title>
      <link>/publication/issta2021/</link>
      <pubDate>Mon, 19 Apr 2021 09:03:56 +0200</pubDate>
      <guid>/publication/issta2021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>What Are We Really Testing in Mutation Testing for Machine Learning? A Critical Reflection</title>
      <link>/publication/icse-nier2020/</link>
      <pubDate>Mon, 18 Jan 2021 14:29:50 +0200</pubDate>
      <guid>/publication/icse-nier2020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>How to Kill Them All: An Exploratory Study on the Impact of Code Observability on Mutation Testing</title>
      <link>/publication/jss2020/</link>
      <pubDate>Tue, 01 Dec 2020 17:32:54 +0200</pubDate>
      <guid>/publication/jss2020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Serverless Testing: Tool Vendors&#39; and Experts&#39; Point of View</title>
      <link>/publication/ieee-software2020/</link>
      <pubDate>Wed, 07 Oct 2020 10:14:08 +0200</pubDate>
      <guid>/publication/ieee-software2020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Crash Reproduction Using Helper Objectives</title>
      <link>/publication/gecco2020/</link>
      <pubDate>Sat, 04 Jul 2020 18:56:54 +0200</pubDate>
      <guid>/publication/gecco2020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Automated Test Generation for Unit Testing Beyond</title>
      <link>/talk/ipa2019/</link>
      <pubDate>Mon, 28 Oct 2019 11:17:15 +0200</pubDate>
      <guid>/talk/ipa2019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Testing Autonomous Cars for Feature Interaction Failures using Evolutionary Intelligence</title>
      <link>/talk/cow2019/</link>
      <pubDate>Tue, 01 Oct 2019 11:17:15 +0200</pubDate>
      <guid>/talk/cow2019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Effective and Efficient API Misuse Detection via Exception Propagation and Search-based Testing</title>
      <link>/publication/issta2019/</link>
      <pubDate>Wed, 01 May 2019 20:22:51 +0200</pubDate>
      <guid>/publication/issta2019/</guid>
      <description>&lt;p&gt;&lt;b&gt; Abstract &lt;/b&gt;: Application Programming Interfaces (APIs)
typically come with (implicit) usage constraints.
The violations of these constraints (API misuses)
can lead to software crashes.
Even though there are several tools that
can detect API misuses,
most of them suffer from a very high rate of false positives.
We introduce Catcher, a novel API misuse detection approach
that combines static exception propagation analysis with automatic search-based test case
generation to effectively and efficiently pinpoint crash-prone API misuses
in client applications.
We validate Catcher against 21 Java applications,
targeting misuses of the Java platform&amp;rsquo;s API.
Our results indicate that Catcher is able to generate
test cases that uncover 243 (unique) API misuses that result in
crashes.
Our empirical evaluation shows that Catcher can detect a large number of misuses (77 cases)
that would remain undetected by the traditional coverage-based test case generator EvoSuite.
Additionally, Catcher is on average eight times faster than EvoSuite
in generating test cases for the identified misuses.
Finally, we find that the majority of the exceptions triggered by Catcher
are unexpected to developers i.e., not only unhandled in the source code but also not listed in the documentation of the client applications.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

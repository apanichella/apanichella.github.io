<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Static Analysis | Annibale Panichella</title>
    <link>https://example.com/tag/static-analysis/</link>
      <atom:link href="https://example.com/tag/static-analysis/index.xml" rel="self" type="application/rss+xml" />
    <description>Static Analysis</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Mon, 01 Jan 2024 19:37:11 +0200</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Static Analysis</title>
      <link>https://example.com/tag/static-analysis/</link>
    </image>
    
    <item>
      <title>CATMA: Conformance Analysis Tool For Microservice Applications</title>
      <link>https://example.com/publication/icse2024-tool/</link>
      <pubDate>Mon, 01 Jan 2024 19:37:11 +0200</pubDate>
      <guid>https://example.com/publication/icse2024-tool/</guid>
      <description>&lt;p&gt;Abstract:&lt;/p&gt;
&lt;p&gt;The microservice architecture allows developers to divide the core functionality of their software system into multiple smaller services. However, this architectural style also makes it harder for them to debug and assess whether the system&amp;rsquo;s deployment conforms to its implementation. We present CATMA, an automated tool that detects non-conformances between the system&amp;rsquo;s deployment and implementation. It automatically visualizes and generates potential interpretations for the detected discrepancies. Our evaluation of CATMA shows promising results in terms of performance and providing useful insights. CATMA is available at &lt;a href=&#34;https://cyber-analytics.nl/catma.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://cyber-analytics.nl/catma.github.io/&lt;/a&gt;, and a demonstration video is available at &lt;a href=&#34;https://youtu.be/WKP1hG-TDKc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://youtu.be/WKP1hG-TDKc&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Slow and The Furious? Performance Antipattern Detection in Cyber-Physical Systems</title>
      <link>https://example.com/publication/jss2023/</link>
      <pubDate>Mon, 01 Jan 2024 17:32:54 +0200</pubDate>
      <guid>https://example.com/publication/jss2023/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Catcher</title>
      <link>https://example.com/tools/catcher/</link>
      <pubDate>Wed, 26 Jun 2019 10:29:32 +0200</pubDate>
      <guid>https://example.com/tools/catcher/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Effective and Efficient API Misuse Detection via Exception Propagation and Search-based Testing</title>
      <link>https://example.com/publication/issta2019/</link>
      <pubDate>Wed, 01 May 2019 20:22:51 +0200</pubDate>
      <guid>https://example.com/publication/issta2019/</guid>
      <description>&lt;p&gt;&lt;b&gt; Abstract &lt;/b&gt;: Application Programming Interfaces (APIs)
typically come with (implicit) usage constraints.
The violations of these constraints (API misuses)
can lead to software crashes.
Even though there are several tools that
can detect API misuses,
most of them suffer from a very high rate of false positives.
We introduce Catcher, a novel API misuse detection approach
that combines static exception propagation analysis with automatic search-based test case
generation to effectively and efficiently pinpoint crash-prone API misuses
in client applications.
We validate Catcher against 21 Java applications,
targeting misuses of the Java platform&amp;rsquo;s API.
Our results indicate that Catcher is able to generate
test cases that uncover 243 (unique) API misuses that result in
crashes.
Our empirical evaluation shows that Catcher can detect a large number of misuses (77 cases)
that would remain undetected by the traditional coverage-based test case generator EvoSuite.
Additionally, Catcher is on average eight times faster than EvoSuite
in generating test cases for the identified misuses.
Finally, we find that the majority of the exceptions triggered by Catcher
are unexpected to developers i.e., not only unhandled in the source code but also not listed in the documentation of the client applications.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>test case generation | Academic</title>
    <link>https://example.com/tag/test-case-generation/</link>
      <atom:link href="https://example.com/tag/test-case-generation/index.xml" rel="self" type="application/rss+xml" />
    <description>test case generation</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Thu, 06 Jun 2024 09:16:23 +0200</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>test case generation</title>
      <link>https://example.com/tag/test-case-generation/</link>
    </image>
    
    <item>
      <title>Higher Fault Detection Through Novel Density Estimators in Unit Test Generation</title>
      <link>https://example.com/publication/ssbse2024/</link>
      <pubDate>Thu, 06 Jun 2024 09:16:23 +0200</pubDate>
      <guid>https://example.com/publication/ssbse2024/</guid>
      <description></description>
    </item>
    
    <item>
      <title>TestSpark: IntelliJ IDEAâ€™s Ultimate Test Generation Companion</title>
      <link>https://example.com/publication/icse2024-tool2/</link>
      <pubDate>Mon, 01 Jan 2024 19:37:11 +0200</pubDate>
      <guid>https://example.com/publication/icse2024-tool2/</guid>
      <description>&lt;p&gt;Abstract:&lt;/p&gt;
&lt;p&gt;Writing software tests is laborious and time-consuming. To address
this, prior studies introduced various automated test-generation
techniques. A well-explored research direction in this field is unit
test generation, wherein artificial intelligence (AI) techniques create
tests for a method/class under test. While many of these techniques
have primarily found applications in a research context, existing
tools (e.g., EvoSuite, Randoop, and AthenaTest) are not user-friendly
and are tailored to a single technique. This paper introduces Test-
Spark, a plugin for IntelliJ IDEA that enables users to generate unit
tests with only a few clicks directly within their Integrated De-
velopment Environment (IDE). Furthermore, TestSpark also allows
users to easily modify and run each generated test and integrate
them into the project workflow. TestSpark leverages the advances of
search-based test generation tools, and it introduces a technique to
generate unit tests using Large Language Models (LLMs) by creating
a feedback cycle between the IDE and the LLM. Since TestSpark is
an open-source (&lt;a href=&#34;https://github.com/JetBrains-Research/TestSpark%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/JetBrains-Research/TestSpark)&lt;/a&gt;,
extendable, and well-documented tool, it is possible to add new test
generation methods into the plugin with the minimum effort. This
paper also explains our future studies related to TestSpark and our
preliminary results.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Generating Class-Level Integration Tests Using Call Site Information</title>
      <link>https://example.com/publication/ieee-tse2022/</link>
      <pubDate>Tue, 13 Sep 2022 09:29:14 +0200</pubDate>
      <guid>https://example.com/publication/ieee-tse2022/</guid>
      <description>&lt;p&gt;Abstract: Search-based approaches have been used in the literature to automate the process of creating unit test cases. However, related work has shown that generated tests with high code coverage could be ineffective, i.e., they may not detect all faults or kill all injected mutants. In this paper, we propose CLING, an integration-level test case generation approach that exploits how a pair of classes, the caller and the callee, interact with each other through method calls. In particular, CLING generates integration-level test cases that maximize the Coupled Branches Criterion (CBC). Coupled branches are pairs of branches containing a branch of the caller and a branch of the callee such that an integration test that exercises the former also exercises the latter. CBC is a novel integration-level coverage criterion, measuring the degree to which a test suite exercises the interactions between a caller and its callee classes. We implemented CLING and evaluated the approach on 140 pairs of classes from five different open-source Java projects. Our results show that (1) CLING generates test suites with high CBC coverage, thanks to the definition of the test suite generation as a many-objectives problem where each couple of branches is an independent objective; (2) such generated suites trigger different class interactions and can kill on average 7.7% (with a maximum of 50%) of mutants that are not detected by tests generated randomly or at the unit level; (3) CLING can detect integration faults coming from wrong assumptions about the usage of the callee class (25 for our subject systems) that remain undetected when using automatically generated random and unit-level test suites.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Guess What: Test Case Generation for Javascript with Unsupervised Probabilistic Type Inference</title>
      <link>https://example.com/publication/ssbse2022/</link>
      <pubDate>Thu, 18 Aug 2022 09:16:23 +0200</pubDate>
      <guid>https://example.com/publication/ssbse2022/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;p&gt;Search-based test case generation approaches make use of static type information to determine which data types should be used for the creation of new test cases. Dynamically typed languages like JavaScript, however, do not have this type information. In this paper, we propose an unsupervised probabilistic type inference approach to infer data types within the test case generation process. We evaluated the proposed approach on a benchmark of 98~units under test (i.e., exported classes and functions) compared to random type sampling w.r.t. branch coverage. Our results show that our type inference approach achieves a statistically significant increase in 56% of the test files with up to 71% of branch coverage compared to the baseline.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Test Smells 20 Years Later: Detectability, Validity, and Reliability</title>
      <link>https://example.com/publication/emse2022/</link>
      <pubDate>Thu, 21 Jul 2022 11:34:14 +0200</pubDate>
      <guid>https://example.com/publication/emse2022/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Guiding Automated Test Case Generation for Transaction-Reverting Statements in Smart Contracts</title>
      <link>https://example.com/publication/icsme2022/</link>
      <pubDate>Sat, 11 Jun 2022 18:43:48 +0200</pubDate>
      <guid>https://example.com/publication/icsme2022/</guid>
      <description></description>
    </item>
    
    <item>
      <title>SynTest-Solidity: Automated Test Case Generation and Fuzzing for Smart Contracts</title>
      <link>https://example.com/publication/icse-demo2022/</link>
      <pubDate>Tue, 18 Jan 2022 14:29:50 +0200</pubDate>
      <guid>https://example.com/publication/icse-demo2022/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Improving Test Case Generation for REST APIs Through Hierarchical Clustering</title>
      <link>https://example.com/publication/ase2021/</link>
      <pubDate>Wed, 07 Jul 2021 22:27:51 +0200</pubDate>
      <guid>https://example.com/publication/ase2021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Hybrid Multi-level Crossover for Unit Test Case Generation</title>
      <link>https://example.com/publication/ssbse2021b/</link>
      <pubDate>Tue, 29 Jun 2021 09:16:23 +0200</pubDate>
      <guid>https://example.com/publication/ssbse2021b/</guid>
      <description>&lt;h1 id=&#34;abstract&#34;&gt;Abstract&lt;/h1&gt;
&lt;p&gt;State-of-the-art search-based approaches for test case generation work at test case level, where tests are represented as sequences of statements. These approaches make use of genetic operators (i.e., mutation and crossover) that create test variants by adding, altering, and removing statements from existing tests. While this encoding schema has been shown to be very effective for many-objective test case generation, the standard crossover operator (single-point) only alters the structure of the test cases but not the input data. In this paper, we argue that changing both the test case structure and the input data is necessary to increase the genetic variation and improve the search process. Hence, we propose a hybrid multi-level crossover (HMX) operator that combines the traditional test-level crossover with data-level recombination. The former evolves and alters the test case structures, while the latter evolves the input data using numeric and string-based recombinational operators. We evaluate our new crossover operator by performing an empirical study on more than 100 classes selected from open-source Java libraries for numerical operations and string manipulation. We compare HMX with the single-point crossover that is used in EvoSuite w.r.t structural coverage and fault detection capability. Our results show that HMX achieves a statistically significant increase in 30% of the classes up to 19% in structural coverage compared to the single-point crossover. Moreover, the fault detection capability improved up to 12% measured using strong mutation score.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>EvoSuite at the SBST 2021 Tool Competition</title>
      <link>https://example.com/publication/sbst2021/</link>
      <pubDate>Thu, 01 Apr 2021 17:56:40 +0200</pubDate>
      <guid>https://example.com/publication/sbst2021/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Revisiting Test Smells in Automatically Generated Tests: Limitations, Pitfalls, and Opportunities</title>
      <link>https://example.com/publication/icsme2020/</link>
      <pubDate>Tue, 04 Aug 2020 16:05:57 +0200</pubDate>
      <guid>https://example.com/publication/icsme2020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Good Things Come In Threes: Improving Search-based Crash Reproduction With Helper Objectives</title>
      <link>https://example.com/publication/ase2020a/</link>
      <pubDate>Thu, 30 Jul 2020 22:27:46 +0200</pubDate>
      <guid>https://example.com/publication/ase2020a/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Generating Highly-structured Input Data by Combining Search-based Testing and Grammar-based Fuzzing</title>
      <link>https://example.com/publication/ase2020-nier/</link>
      <pubDate>Mon, 06 Jul 2020 14:29:50 +0200</pubDate>
      <guid>https://example.com/publication/ase2020-nier/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Crash Reproduction Using Helper Objectives</title>
      <link>https://example.com/publication/gecco2020/</link>
      <pubDate>Sat, 04 Jul 2020 18:56:54 +0200</pubDate>
      <guid>https://example.com/publication/gecco2020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>EvoSuite at the SBST 2020 Tool Competition</title>
      <link>https://example.com/publication/sbst2020/</link>
      <pubDate>Fri, 17 Apr 2020 17:56:40 +0200</pubDate>
      <guid>https://example.com/publication/sbst2020/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Automated Test Generation for Unit Testing Beyond</title>
      <link>https://example.com/talk/automated-test-generation-for-unit-testing-beyond/</link>
      <pubDate>Mon, 28 Oct 2019 11:17:15 +0200</pubDate>
      <guid>https://example.com/talk/automated-test-generation-for-unit-testing-beyond/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Testing with Fewer Resources: An Adaptive Approach to Performance-Aware Test Case Generation</title>
      <link>https://example.com/publication/ieee-tse2019/</link>
      <pubDate>Wed, 09 Oct 2019 09:51:33 +0200</pubDate>
      <guid>https://example.com/publication/ieee-tse2019/</guid>
      <description>&lt;p&gt;Abstract: Automated test case generation is an effective technique to yield high-coverage test suites.
While the majority of research effort has been devoted to satisfying coverage criteria, a recent trend emerged towards optimizing other non-coverage aspects.
In this regard, runtime and memory usage are two essential dimensions: less expensive tests reduce the resource demands for the generation process and later regression testing phases.
This study shows that performance-aware test case generation requires solving two main challenges:
providing a good approximation of resource usage with minimal overhead and&lt;br&gt;
avoiding detrimental effects on both final coverage and fault detection effectiveness.
To tackle these challenges, we conceived a set of performance proxies -inspired by previous work on performance testing- that provide a reasonable estimation of the test execution costs (i.e., runtime and memory usage).
Thus, we propose an adaptive strategy, called aDynaMOSA, which leverages these proxies by extending DynaMOSA, a state-of-the-art evolutionary algorithm in unit testing.
Our empirical study -involving 110 non-trivial Java classes- reveals
that our adaptive approach generates test suite with statistically significant improvements in runtime (-25%) and heap memory consumption (-15%) compared to DynaMOSA. Additionally, aDynaMOSA has comparable results to DynaMOSA over seven different coverage criteria and similar fault detection effectiveness.
Our empirical investigation also highlights that the usage of performance proxies (i.e., without the adaptiveness) is not sufficient to generate more performant test cases without compromising the overall coverage.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cling</title>
      <link>https://example.com/tools/cling/</link>
      <pubDate>Wed, 26 Jun 2019 10:29:32 +0200</pubDate>
      <guid>https://example.com/tools/cling/</guid>
      <description>&lt;p&gt;Towards Integration-Level Test Case Generation Using Call Site Information&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>EvoSuite at the SBST 2019 Tool Competition</title>
      <link>https://example.com/publication/sbst2019b/</link>
      <pubDate>Mon, 08 Apr 2019 10:41:50 +0200</pubDate>
      <guid>https://example.com/publication/sbst2019b/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Beyond Unit-Testing in Search-based Test Case Generation: Challenges and Opportunities</title>
      <link>https://example.com/publication/sbst2019a/</link>
      <pubDate>Mon, 08 Apr 2019 10:39:03 +0200</pubDate>
      <guid>https://example.com/publication/sbst2019a/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search-based Multi-Vulnerability Testing of XML Injections in Web Applications</title>
      <link>https://example.com/publication/emse2019/</link>
      <pubDate>Mon, 08 Apr 2019 10:11:19 +0200</pubDate>
      <guid>https://example.com/publication/emse2019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Large Scale Empirical Comparison of State-of-the-art Search-based Test Case Generators</title>
      <link>https://example.com/publication/infsof2018b/</link>
      <pubDate>Sat, 18 Aug 2018 07:39:53 +0200</pubDate>
      <guid>https://example.com/publication/infsof2018b/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Incremental Control Dependency Frontier Exploration for Many-Criteria Test Case Generation</title>
      <link>https://example.com/publication/ssbse2018b/</link>
      <pubDate>Fri, 20 Jul 2018 00:07:54 +0200</pubDate>
      <guid>https://example.com/publication/ssbse2018b/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search-Based Test Data Generation for SQL Queries</title>
      <link>https://example.com/publication/icse2018/</link>
      <pubDate>Fri, 20 Jul 2018 00:04:04 +0200</pubDate>
      <guid>https://example.com/publication/icse2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Testing Autonomous Cars for Feature Interaction Failures using Many-Objective Search</title>
      <link>https://example.com/publication/ase2018/</link>
      <pubDate>Fri, 20 Jul 2018 00:01:56 +0200</pubDate>
      <guid>https://example.com/publication/ase2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Java Unit Testing Tool Competition - Sixth Round</title>
      <link>https://example.com/publication/sbst2018/</link>
      <pubDate>Fri, 20 Jul 2018 00:01:14 +0200</pubDate>
      <guid>https://example.com/publication/sbst2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Automated Test Case Generation as a Many-Objective Optimisation Problem with Dynamic Selection of the Targets</title>
      <link>https://example.com/publication/ieee-tse2018b/</link>
      <pubDate>Tue, 10 Jul 2018 11:23:34 +0200</pubDate>
      <guid>https://example.com/publication/ieee-tse2018b/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Java Unit Testing Tool Competition - Fifth Round</title>
      <link>https://example.com/publication/sbst2017/</link>
      <pubDate>Sun, 13 Aug 2017 20:05:07 +0200</pubDate>
      <guid>https://example.com/publication/sbst2017/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Guided Genetic Algorithm for Automated Crash Reproduction</title>
      <link>https://example.com/publication/icse2017/</link>
      <pubDate>Sun, 13 Aug 2017 19:34:17 +0200</pubDate>
      <guid>https://example.com/publication/icse2017/</guid>
      <description></description>
    </item>
    
    <item>
      <title>LIPS vs MOSA: a Replicated Empirical Study on Automated Test Case Generation</title>
      <link>https://example.com/publication/ssbse2017/</link>
      <pubDate>Thu, 13 Jul 2017 20:03:02 +0200</pubDate>
      <guid>https://example.com/publication/ssbse2017/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Evolutionary Testing for Crash Reproduction</title>
      <link>https://example.com/publication/sbst2016a/</link>
      <pubDate>Thu, 18 Aug 2016 07:56:19 +0200</pubDate>
      <guid>https://example.com/publication/sbst2016a/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Automatic Test Case Generation: What If Test Code Quality Matters?</title>
      <link>https://example.com/publication/issta2016/</link>
      <pubDate>Thu, 18 Aug 2016 07:45:36 +0200</pubDate>
      <guid>https://example.com/publication/issta2016/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>

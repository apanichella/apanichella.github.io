<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tools | Academic</title>
    <link>https://example.com/tools/</link>
      <atom:link href="https://example.com/tools/index.xml" rel="self" type="application/rss+xml" />
    <description>Tools</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Wed, 26 Jun 2019 10:29:32 +0200</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Tools</title>
      <link>https://example.com/tools/</link>
    </image>
    
    <item>
      <title>Catcher</title>
      <link>https://example.com/tools/catcher/</link>
      <pubDate>Wed, 26 Jun 2019 10:29:32 +0200</pubDate>
      <guid>https://example.com/tools/catcher/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Cling</title>
      <link>https://example.com/tools/cling/</link>
      <pubDate>Wed, 26 Jun 2019 10:29:32 +0200</pubDate>
      <guid>https://example.com/tools/cling/</guid>
      <description>&lt;p&gt;Towards Integration-Level Test Case Generation Using Call Site Information&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Search-Based-LDA</title>
      <link>https://example.com/tools/ssbse-lda/</link>
      <pubDate>Wed, 26 Jun 2019 10:29:32 +0200</pubDate>
      <guid>https://example.com/tools/ssbse-lda/</guid>
      <description>&lt;p&gt;A Systematic Comparison of Search Algorithms for Topic Modelling - A Study on DuplicateBug Report Identification&lt;/p&gt;
&lt;h3 id=&#34;author&#34;&gt;Author&lt;/h3&gt;
&lt;p&gt;Annibale Panichella&lt;/p&gt;
&lt;h3 id=&#34;venue&#34;&gt;Venue&lt;/h3&gt;
&lt;p&gt;SSBSE 2019&lt;/p&gt;
&lt;h4 id=&#34;abstract&#34;&gt;Abstract&lt;/h4&gt;
&lt;p&gt;Latent Dirichlet Allocation (LDA) has been used to supportmany software engineering tasks. Previous studies showed that defaultsettings lead to sub-optimal topic modeling with a dramatic impacton the performance of such approaches in terms of precision andrecall. For this reason, researchers used search algorithms (e.g., geneticalgorithms) to automatically configure topic models in an unsupervisedfashion. While previous work showed the ability of individual search algorithmsin finding near-optimal configurations, it is not clear to whatextent the choice of the meta-heuristic matters for SE tasks. In this paper,we present a systematic comparison of five different meta-heuristicsto configure LDA in the context of duplicate bug reports identification.The results show that (1) no master algorithm outperforms the othersfor all software projects, (2) random search and PSO are the least effectivemeta-heuristics. Finally, the running time strongly depends on thecomputational complexity of LDA while the internal complexity of thesearch algorithms plays a negligible role.&lt;/p&gt;
&lt;h3 id=&#34;getting-started&#34;&gt;Getting started&lt;/h3&gt;
&lt;p&gt;The source code is available in GitHub at the link: &lt;a href=&#34;https://github.com/apanichella/Search-Based-LDA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/apanichella/Search-Based-LDA&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AGE-MOEA</title>
      <link>https://example.com/tools/age-moea/</link>
      <pubDate>Mon, 08 Apr 2019 11:08:54 +0200</pubDate>
      <guid>https://example.com/tools/age-moea/</guid>
      <description>&lt;h3 id=&#34;title&#34;&gt;Title&lt;/h3&gt;
&lt;p&gt;An Adaptive Evolutionary Algorithm based on Non-Euclidean Geometry for Many-objective Optimization&lt;/p&gt;
&lt;h3 id=&#34;author&#34;&gt;Author&lt;/h3&gt;
&lt;p&gt;Annibale Panichella&lt;/p&gt;
&lt;h3 id=&#34;venue&#34;&gt;Venue&lt;/h3&gt;
&lt;p&gt;GECCO 2019&lt;/p&gt;
&lt;h4 id=&#34;abstract&#34;&gt;Abstract&lt;/h4&gt;
&lt;p&gt;In the last decade, several evolutionary algorithms have been proposed in the literature for solving multi- and many-objective optimization problems. The performance of such algorithms depends on their capability to produce a well-diversified front (diversity) that is as closer to the Pareto optimal front as possible (proximity). Diversity and proximity strongly depend on the geometry of the Pareto front, i.e., whether it forms a Euclidean, spherical or hyperbolic hypersurface.  However, existing multi- and many-objective evolutionary algorithms show poor versatility on different geometries. To address this issue, we propose a novel evolutionary algorithm that: (1) estimates the geometry of the generated front using a fast procedure with O(MxN) computational complexity (M is the number of objectives and N is the population size); (2) adapts the diversity and proximity metrics accordingly. Therefore, to form the population for the next generation, solutions are selected based on their contribution to the diversity and proximity of the non-dominated front with regards to the estimated geometry. Computational experiments show that the proposed algorithm outperforms state-of-the-art multi and many-objective evolutionary algorithms on benchmark test problems with different geometries and number of objectives (M=3,5, and 10).&lt;/p&gt;
&lt;h3 id=&#34;getting-started&#34;&gt;Getting started&lt;/h3&gt;
&lt;p&gt;The source code of AGE-MOEA can be downloaded: &lt;a href=&#34;https://github.com/apanichella/PlatEMO&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AGE-MOEA is implemented as a module (algorithm) to include in the platform &lt;a href=&#34;https://github.com/BIMK/PlatEMO&#34;&gt;PlatEMO&lt;/a&gt;.
Download the zip file (see link above) and extract its content in the folder &lt;code&gt;Algorithms&lt;/code&gt; of &lt;code&gt;PlatEMO&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
